#ifndef STATISTICAL_TESTS_H
#define STATISTICAL_TESTS_H

#include <vector>
#include <string>

/**
 * @brief Результат критерия Граббса для выявления выбросов
 *
 * Критерий Граббса используется для обнаружения одного выброса в выборке
 * из нормального распределения (Агамиров, раздел 3.2)
 */
struct GrubbsTestResult {
    double test_statistic;     // Значение статистики G
    double critical_value;     // Критическое значение из таблицы
    bool is_outlier;          // true, если обнаружен выброс
    double outlier_value;     // Значение подозрительного наблюдения
    size_t outlier_index;     // Индекс подозрительного наблюдения
    double alpha;             // Уровень значимости
    size_t n;                 // Размер выборки
    std::string test_type;    // "max" или "min" - какое значение проверялось
};

/**
 * @brief Результат F-критерия Фишера для сравнения дисперсий
 *
 * F-критерий используется для проверки гипотезы о равенстве дисперсий
 * двух нормальных распределений (Агамиров, формула 3.12)
 */
struct FisherTestResult {
    double f_statistic;       // Значение F-статистики (отношение дисперсий)
    double critical_value;    // Критическое значение F-распределения
    double p_value;           // P-значение двустороннего теста
    bool reject_h0;           // true, если отвергаем H0: σ₁² = σ₂²
    double var1;              // Дисперсия первой выборки
    double var2;              // Дисперсия второй выборки
    size_t n1;                // Размер первой выборки
    size_t n2;                // Размер второй выборки
    size_t df1;               // Степени свободы числителя
    size_t df2;               // Степени свободы знаменателя
    double alpha;             // Уровень значимости
};

/**
 * @brief Результат t-критерия Стьюдента для сравнения средних
 *
 * t-критерий используется для проверки гипотезы о равенстве средних
 * двух нормальных распределений (Агамиров, формулы 3.14-3.16)
 */
struct StudentTestResult {
    double t_statistic;       // Значение t-статистики
    double critical_value;    // Критическое значение t-распределения
    double p_value;           // P-значение двустороннего теста
    bool reject_h0;           // true, если отвергаем H0: μ₁ = μ₂
    double mean1;             // Среднее первой выборки
    double mean2;             // Среднее второй выборки
    double std1;              // СКО первой выборки
    double std2;              // СКО второй выборки
    size_t n1;                // Размер первой выборки
    size_t n2;                // Размер второй выборки
    double df;                // Степени свободы (может быть дробным для Уэлча)
    double pooled_std;        // Объединенное СКО (только для равных дисперсий)
    double alpha;             // Уровень значимости
    std::string test_type;    // "equal_var" или "unequal_var" (Welch)
};

// ============================================================================
// Критерий Граббса (Grubbs' test)
// ============================================================================

/**
 * @brief Критерий Граббса для проверки максимального значения на выброс
 *
 * Проверяет гипотезу H0: максимальное значение не является выбросом
 * Статистика: G = (x_max - x̄) / s
 *
 * @param data Выборка данных (должна быть из нормального распределения)
 * @param alpha Уровень значимости (по умолчанию 0.05)
 * @return Результат теста с подробной информацией
 *
 * Формула (3.8) из Агамирова:
 * G = max|xi - x̄| / s
 * где s - выборочное стандартное отклонение
 */
GrubbsTestResult grubbs_test_max(const std::vector<double>& data, double alpha = 0.05);

/**
 * @brief Критерий Граббса для проверки минимального значения на выброс
 *
 * Проверяет гипотезу H0: минимальное значение не является выбросом
 * Статистика: G = (x̄ - x_min) / s
 *
 * @param data Выборка данных
 * @param alpha Уровень значимости
 * @return Результат теста
 */
GrubbsTestResult grubbs_test_min(const std::vector<double>& data, double alpha = 0.05);

/**
 * @brief Критерий Граббса для проверки обоих экстремумов (двусторонний тест)
 *
 * Проверяет оба экстремума и возвращает результат для наиболее подозрительного
 *
 * @param data Выборка данных
 * @param alpha Уровень значимости
 * @return Результат теста для наиболее подозрительного значения
 */
GrubbsTestResult grubbs_test(const std::vector<double>& data, double alpha = 0.05);

// ============================================================================
// F-критерий Фишера (Fisher's F-test)
// ============================================================================

/**
 * @brief F-критерий Фишера для сравнения дисперсий двух выборок
 *
 * Проверяет гипотезу H0: σ₁² = σ₂² против H1: σ₁² ≠ σ₂²
 *
 * Статистика: F = s₁² / s₂² (где s₁² ≥ s₂²)
 * F ~ F(n₁-1, n₂-1)
 *
 * @param data1 Первая выборка
 * @param data2 Вторая выборка
 * @param alpha Уровень значимости (по умолчанию 0.05)
 * @return Результат теста с F-статистикой и критическим значением
 *
 * Формула (3.12) из Агамирова:
 * F = s₁²/s₂² ~ F(n₁-1, n₂-1)
 */
FisherTestResult fisher_test(const std::vector<double>& data1,
                             const std::vector<double>& data2,
                             double alpha = 0.05);

// ============================================================================
// t-критерий Стьюдента (Student's t-test)
// ============================================================================

/**
 * @brief t-критерий Стьюдента для равных дисперсий (классический)
 *
 * Проверяет гипотезу H0: μ₁ = μ₂ при условии σ₁² = σ₂²
 *
 * Статистика (формула 3.14 из Агамирова):
 * t = (x̄₁ - x̄₂) / (sp * sqrt(1/n₁ + 1/n₂))
 * где sp² = ((n₁-1)s₁² + (n₂-1)s₂²) / (n₁+n₂-2) - объединенная дисперсия
 *
 * Распределение: t ~ Student(n₁ + n₂ - 2)
 *
 * @param data1 Первая выборка
 * @param data2 Вторая выборка
 * @param alpha Уровень значимости (по умолчанию 0.05)
 * @return Результат теста
 *
 * Применимость: Когда F-тест подтверждает равенство дисперсий
 */
StudentTestResult student_test_equal_var(const std::vector<double>& data1,
                                         const std::vector<double>& data2,
                                         double alpha = 0.05);

/**
 * @brief t-критерий Стьюдента для неравных дисперсий (критерий Уэлча)
 *
 * Проверяет гипотезу H0: μ₁ = μ₂ без предположения о равенстве дисперсий
 *
 * Статистика (формула 3.16 из Агамирова):
 * t = (x̄₁ - x̄₂) / sqrt(s₁²/n₁ + s₂²/n₂)
 *
 * Степени свободы (приближение Уэлча-Саттертуэйта):
 * ν = (s₁²/n₁ + s₂²/n₂)² / ((s₁²/n₁)²/(n₁-1) + (s₂²/n₂)²/(n₂-1))
 *
 * Распределение: t ~ Student(ν)
 *
 * @param data1 Первая выборка
 * @param data2 Вторая выборка
 * @param alpha Уровень значимости (по умолчанию 0.05)
 * @return Результат теста
 *
 * Применимость: Когда F-тест отвергает гипотезу о равенстве дисперсий
 */
StudentTestResult student_test_unequal_var(const std::vector<double>& data1,
                                           const std::vector<double>& data2,
                                           double alpha = 0.05);

/**
 * @brief Автоматический t-критерий с предварительной проверкой дисперсий
 *
 * Сначала выполняет F-тест для проверки равенства дисперсий,
 * затем применяет соответствующий вариант t-критерия
 *
 * @param data1 Первая выборка
 * @param data2 Вторая выборка
 * @param alpha Уровень значимости
 * @return Результат t-теста (с указанием использованного метода)
 */
StudentTestResult student_test_auto(const std::vector<double>& data1,
                                    const std::vector<double>& data2,
                                    double alpha = 0.05);

// ============================================================================
// Вспомогательные функции для вывода результатов
// ============================================================================

/**
 * @brief Вывод результатов критерия Граббса в консоль и файл
 */
void print_grubbs_result(const GrubbsTestResult& result, const std::string& filename = "");

/**
 * @brief Вывод результатов F-критерия в консоль и файл
 */
void print_fisher_result(const FisherTestResult& result, const std::string& filename = "");

/**
 * @brief Вывод результатов t-критерия в консоль и файл
 */
void print_student_result(const StudentTestResult& result, const std::string& filename = "");

#endif // STATISTICAL_TESTS_H
